 2020-05-24 08:01:16,552 - tweet - INFO - TweetApp: all done
2020-05-24 08:11:34,004 - tweet - INFO - Done config_logger
2020-05-24 08:11:34,005 - tweet - Notice - 


============================

Running TweetApp version = Ver: Alpha 11 - 2020 05 24.1 mode = add_2019

2020-05-24 08:11:34,005 - tweet - Notice - 


============================

Running TweetApp version = Ver: Alpha 11 - 2020 05 24.1 mode = add_2019

command line arg 0 =  D:\Russ\0000\python00\python3\_projects\twitter_analysis_db\sql_builder.py
current directory D:\Russ\0000\python00\python3\_projects\twitter_analysis_db
2020-05-24 08:11:34,005 - tweet - Notice - <parameters.Parameters object at 0x000001F53D71F708>
2020-05-24 08:11:34,005 - tweet - Notice - Time now: 2020-05-24 12:11:34
2020-05-24 08:11:34,112 - tweet.gui - INFO - in class gui_new GUI init
2020-05-24 08:11:34,357 - tweet - Notice - process memory =     341.54 mega bytes 
2020-05-24 08:11:42,198 - tweet - DEBUG - >>Information on: Basic Concordance Select -> ( concord_select_1.txt )

General:
    A concordance summary ( number of times a word is used ) is build for
    a specified time period ( can be "forever" )

SQL:
    The concord table is joined to the tweets table, and words are grouped and counted.

Select Criteria:
    date range   user input  whole bunch of different widgets, drop downs, and slider
    tweet_type   user input  dropdown
    word_type    user input  dropdown 

Output Format:
    the usual    user input  drop down        
        
Sort Order:
    by number of occurrences of each word 
        
Note: 
    to better understand the select you may want to go to <Help> and
    read the section on the database.        
                
>-----------------------------------------------------------<  
 
....
2020-05-24 08:11:42,200 - tweet - DEBUG - >>sql is:

 SELECT concord.word, concord.word_type, concord.is_ascii, '*rc*', COUNT( * ) as my_count FROM concord JOIN tweets  ON concord.tweet_id = tweets.tweet_id 
 WHERE 
    tweets.tweet_datetime  >= ?  AND  
    tweets.tweet_datetime <= ?  AND  
    tweets.tweet_type = ? GROUP BY concord.word 
    HAVING ( my_count > ? ) 
    ORDER BY my_count Desc, concord.word 

....
2020-05-24 08:11:42,201 - tweet - DEBUG - >>sql_data is:
[datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet', 3]
....
2020-05-24 08:11:42,202 - tweet - DEBUG - >>Select Done, rows selected: 0 time = 0
....
2020-05-24 08:11:42,202 - tweet - DEBUG - Select Done, rows selected: 0 time = 0
2020-05-24 08:11:43,386 - tweet - DEBUG - >>Information on: Basic Concordance Select -> ( concord_select_1.txt )

General:
    A concordance summary ( number of times a word is used ) is build for
    a specified time period ( can be "forever" )

SQL:
    The concord table is joined to the tweets table, and words are grouped and counted.

Select Criteria:
    date range   user input  whole bunch of different widgets, drop downs, and slider
    tweet_type   user input  dropdown
    word_type    user input  dropdown 

Output Format:
    the usual    user input  drop down        
        
Sort Order:
    by number of occurrences of each word 
        
Note: 
    to better understand the select you may want to go to <Help> and
    read the section on the database.        
                
>-----------------------------------------------------------<  
 
....
2020-05-24 08:11:43,388 - tweet - DEBUG - >>sql is:

 SELECT concord.word, concord.word_type, concord.is_ascii, '*rc*', COUNT( * ) as my_count FROM concord JOIN tweets  ON concord.tweet_id = tweets.tweet_id 
 WHERE 
    tweets.tweet_datetime  >= ?  AND  
    tweets.tweet_datetime <= ?  AND  
    tweets.tweet_type = ? GROUP BY concord.word 
    HAVING ( my_count > ? ) 
    ORDER BY my_count Desc, concord.word 

....
2020-05-24 08:11:43,389 - tweet - DEBUG - >>sql_data is:
[datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet', 3]
....
2020-05-24 08:11:44,257 - tweet - DEBUG - select complete with footer info: Done: >
     total number of rows = 2137
     select and file write took 0.8676648139953613 seconds
2020-05-24 08:11:44,265 - tweet - DEBUG - >>Select Done, rows selected: 2137 time = 0.8676648139953613
....
2020-05-24 08:11:44,266 - tweet - DEBUG - Select Done, rows selected: 2137 time = 0.8676648139953613
2020-05-24 08:12:30,062 - tweet - INFO - TweetApp: all done
2020-05-24 08:17:10,382 - tweet - INFO - Done config_logger
2020-05-24 08:17:10,382 - tweet - Notice - 


============================

Running TweetApp version = Ver: Alpha 11 - 2020 05 24.1 mode = add_2019

2020-05-24 08:17:10,382 - tweet - Notice - 


============================

Running TweetApp version = Ver: Alpha 11 - 2020 05 24.1 mode = add_2019

command line arg 0 =  D:\Russ\0000\python00\python3\_projects\twitter_analysis_db\tweet_app.py
current directory D:\Russ\0000\python00\python3\_projects\twitter_analysis_db
2020-05-24 08:17:10,382 - tweet - Notice - <parameters.Parameters object at 0x000001F53F01DD48>
2020-05-24 08:17:10,383 - tweet - Notice - Time now: 2020-05-24 12:17:10
2020-05-24 08:17:10,489 - tweet.gui - INFO - in class gui_new GUI init
2020-05-24 08:17:10,727 - tweet - Notice - process memory =     421.99 mega bytes 
2020-05-24 08:17:35,219 - tweet - INFO - TweetApp: all done
2020-05-24 08:17:40,595 - tweet - INFO - Done config_logger
2020-05-24 08:17:40,596 - tweet - Notice - 


============================

Running TweetApp version = Ver: Alpha 11 - 2020 05 24.1 mode = add_2019

2020-05-24 08:17:40,596 - tweet - Notice - 


============================

Running TweetApp version = Ver: Alpha 11 - 2020 05 24.1 mode = add_2019

command line arg 0 =  D:\Russ\0000\python00\python3\_projects\twitter_analysis_db\tweet_app.py
current directory D:\Russ\0000\python00\python3\_projects\twitter_analysis_db
2020-05-24 08:17:40,596 - tweet - Notice - <parameters.Parameters object at 0x000001F55391E188>
2020-05-24 08:17:40,596 - tweet - Notice - Time now: 2020-05-24 12:17:40
2020-05-24 08:17:40,705 - tweet.gui - INFO - in class gui_new GUI init
2020-05-24 08:17:40,969 - tweet - Notice - process memory =     499.67 mega bytes 
2020-05-24 08:23:28,796 - tweet - INFO - TweetApp: all done
2020-05-24 08:23:32,676 - tweet - INFO - Done config_logger
2020-05-24 08:23:32,676 - tweet - Notice - 


============================

Running TweetApp version = Ver: Alpha 11 - 2020 05 24.1 mode = add_2019

2020-05-24 08:23:32,676 - tweet - Notice - 


============================

Running TweetApp version = Ver: Alpha 11 - 2020 05 24.1 mode = add_2019

command line arg 0 =  D:\Russ\0000\python00\python3\_projects\twitter_analysis_db\tweet_app.py
current directory D:\Russ\0000\python00\python3\_projects\twitter_analysis_db
2020-05-24 08:23:32,676 - tweet - Notice - <parameters.Parameters object at 0x000001F53F2A8148>
2020-05-24 08:23:32,676 - tweet - Notice - Time now: 2020-05-24 12:23:32
2020-05-24 08:23:32,778 - tweet.gui - INFO - in class gui_new GUI init
2020-05-24 08:23:33,026 - tweet - Notice - process memory =     576.20 mega bytes 
2020-05-24 08:23:35,643 - tweet - DEBUG - tweet_select_1 builder vars: builder vars ( self.x ):
     db_name:            
     select_name:        Basic Tweet Select
     output_format:      txt
     columns_out:        None
     a_word:             joe
     is_covid:           None
     default_order_by:   
     gui_order_by:       default
     begin_dt:           2019-10-10 00:00:00
     end_dt:             2020-11-20 00:00:00
     tweet_type:         tweet
     max_count:          None
     word_type:          None
     my_count:           None
     sql:                
     sql_where:          
     sql_having:         
     sql_data:           []



2020-05-24 08:23:35,653 - tweet - DEBUG - >>Basic Tweet Select > ( tweet_select_1.txt  )

General:        
    Find desired tweets
    Check tweet loading 
    Does not join to concord ( concordance ) or word tables, just tweets 
 
SQL:
    Straight select from tweets table only no corcordance or word info
 
Select Criteria: 
                 
    is Covid -   user input see dropdown.
    date range - user input whole bunch of different widgets, drop downs and slider
    ( other gui widgets ignored )
                   
Output Format:
    the usual - user input see dropdown

        
Sort:           
    user input see dropdown   !! not implementd 
                     
....
2020-05-24 08:23:35,655 - tweet - DEBUG - >>sql is:

 SELECT tweets.tweet_datetime, tweets.tweet_type, tweets.tweet, tweets.tweet_id  FROM tweets 
 WHERE 
    tweets.tweet_datetime  >= ?  AND  
    tweets.tweet_datetime <= ?  AND  
    tweets.tweet_type = ?   ORDER BY tweets.tweet_datetime 

....
2020-05-24 08:23:35,656 - tweet - DEBUG - >>sql_data is:
[datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 08:23:35,656 - tweet - DEBUG - >>Select Done, rows selected: 0 time = 0
....
2020-05-24 08:23:35,657 - tweet - DEBUG - Select Done, rows selected: 0 time = 0
2020-05-24 08:23:37,043 - tweet - DEBUG - tweet_select_1 builder vars: builder vars ( self.x ):
     db_name:            
     select_name:        Basic Tweet Select
     output_format:      txt
     columns_out:        None
     a_word:             joe
     is_covid:           None
     default_order_by:   
     gui_order_by:       default
     begin_dt:           2019-10-10 00:00:00
     end_dt:             2020-11-20 00:00:00
     tweet_type:         tweet
     max_count:          None
     word_type:          None
     my_count:           None
     sql:                
     sql_where:          
     sql_having:         
     sql_data:           []



2020-05-24 08:23:37,044 - tweet - DEBUG - >>Basic Tweet Select > ( tweet_select_1.txt  )

General:        
    Find desired tweets
    Check tweet loading 
    Does not join to concord ( concordance ) or word tables, just tweets 
 
SQL:
    Straight select from tweets table only no corcordance or word info
 
Select Criteria: 
                 
    is Covid -   user input see dropdown.
    date range - user input whole bunch of different widgets, drop downs and slider
    ( other gui widgets ignored )
                   
Output Format:
    the usual - user input see dropdown

        
Sort:           
    user input see dropdown   !! not implementd 
                     
....
2020-05-24 08:23:37,045 - tweet - DEBUG - >>sql is:

 SELECT tweets.tweet_datetime, tweets.tweet_type, tweets.tweet, tweets.tweet_id  FROM tweets 
 WHERE 
    tweets.tweet_datetime  >= ?  AND  
    tweets.tweet_datetime <= ?  AND  
    tweets.tweet_type = ?   ORDER BY tweets.tweet_datetime 

....
2020-05-24 08:23:37,046 - tweet - DEBUG - >>sql_data is:
[datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 08:26:08,846 - tweet - DEBUG - >>Information on: Basic Concordance Select -> ( concord_select_1.txt )

General:
    A concordance summary ( number of times a word is used ) is build for
    a specified time period ( can be "forever" )

SQL:
    The concord table is joined to the tweets table, and words are grouped and counted.

Select Criteria:
    date range   user input  whole bunch of different widgets, drop downs, and slider
    tweet_type   user input  dropdown
    word_type    user input  dropdown 

Output Format:
    the usual    user input  drop down        
        
Sort Order:
    by number of occurrences of each word 
        
Note: 
    to better understand the select you may want to go to <Help> and
    read the section on the database.        
                
>-----------------------------------------------------------<  
 
....
2020-05-24 08:26:08,847 - tweet - DEBUG - >>sql is:

 SELECT concord.word, concord.word_type, concord.is_ascii, '*rc*', COUNT( * ) as my_count FROM concord JOIN tweets  ON concord.tweet_id = tweets.tweet_id 
 WHERE 
    tweets.tweet_datetime  >= ?  AND  
    tweets.tweet_datetime <= ?  AND  
    tweets.tweet_type = ? GROUP BY concord.word 
    HAVING ( my_count > ? ) 
    ORDER BY my_count Desc, concord.word 

....
2020-05-24 08:26:08,848 - tweet - DEBUG - >>sql_data is:
[datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet', 3]
....
2020-05-24 08:26:08,848 - tweet - DEBUG - >>Select Done, rows selected: 0 time = 0
....
2020-05-24 08:26:08,848 - tweet - DEBUG - Select Done, rows selected: 0 time = 0
2020-05-24 08:26:10,135 - tweet - DEBUG - >>Information on: Basic Concordance Select -> ( concord_select_1.txt )

General:
    A concordance summary ( number of times a word is used ) is build for
    a specified time period ( can be "forever" )

SQL:
    The concord table is joined to the tweets table, and words are grouped and counted.

Select Criteria:
    date range   user input  whole bunch of different widgets, drop downs, and slider
    tweet_type   user input  dropdown
    word_type    user input  dropdown 

Output Format:
    the usual    user input  drop down        
        
Sort Order:
    by number of occurrences of each word 
        
Note: 
    to better understand the select you may want to go to <Help> and
    read the section on the database.        
                
>-----------------------------------------------------------<  
 
....
2020-05-24 08:26:10,137 - tweet - DEBUG - >>sql is:

 SELECT concord.word, concord.word_type, concord.is_ascii, '*rc*', COUNT( * ) as my_count FROM concord JOIN tweets  ON concord.tweet_id = tweets.tweet_id 
 WHERE 
    tweets.tweet_datetime  >= ?  AND  
    tweets.tweet_datetime <= ?  AND  
    tweets.tweet_type = ? GROUP BY concord.word 
    HAVING ( my_count > ? ) 
    ORDER BY my_count Desc, concord.word 

....
2020-05-24 08:26:10,139 - tweet - DEBUG - >>sql_data is:
[datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet', 3]
....
2020-05-24 08:26:10,982 - tweet - DEBUG - select complete with footer info: Done: >
     total number of rows = 2137
     select and file write took 0.8422894477844238 seconds
2020-05-24 08:26:10,989 - tweet - DEBUG - >>Select Done, rows selected: 2137 time = 0.8422894477844238
....
2020-05-24 08:26:10,990 - tweet - DEBUG - Select Done, rows selected: 2137 time = 0.8422894477844238
2020-05-24 08:26:21,910 - tweet - DEBUG - >>Information on: select_03   Select Tweets Joined -> (select_03.txt)

General:
    A 3 way join of all tables, potentially can report on any column.  No grouping.
    
SQL:
    The concord table is joined to the tweets table, and to the words table.  The join to 
    the words table gives us word count and word rank.
   
Select Criteria:
    date range   user input  whole bunch of different widgets, drop downs, and slider
    tweet_type   user input  dropdown
    word_type    user input  dropdown 
    word         user input  dropdown and text entry ( use % as wild card for multiple char )
    .... check and update         
    Min Rank: words.word_rank ) words.see drop down
    Max Count: (words.word_count) see drop down
   
Output Format:
    the usual    user input  drop down        
        
Sort Order:
    by number of occurrences of each word 
        
Note: 
    to better understand the select you may want to go to <Help> and
    read the section on the database.   

>-----------------------------------------------------------<                    
....
2020-05-24 08:26:21,912 - tweet - DEBUG - >>sql is:  SELECT DISTINCT tweets.tweet_datetime, concord.word, tweets.tweet, tweets.tweet_type, tweets.is_covid, words.word_rank, tweets.tweet_id, '*rc*', '*twr*' 
    FROM concord 
    JOIN tweets  ON concord.tweet_id = tweets.tweet_id  
    LEFT OUTER JOIN words  ON concord.word = words.word  
 WHERE 
    concord.word  LIKE     "joe" AND  
    tweets.tweet_datetime  >= ?  AND  
    tweets.tweet_datetime <= ?  AND  
    tweets.tweet_type = ?   
    ORDER BY tweets.tweet_datetime
....
2020-05-24 08:26:21,913 - tweet - DEBUG - >>sql_data is:  [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 08:26:21,914 - tweet - DEBUG - >>sql_data is:  [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 08:26:21,915 - tweet - DEBUG - >>Select Done, rows selected: 0 time = 0
....
2020-05-24 08:26:21,915 - tweet - DEBUG - Select Done, rows selected: 0 time = 0
2020-05-24 08:26:23,728 - tweet - DEBUG - >>Information on: select_03   Select Tweets Joined -> (select_03.txt)

General:
    A 3 way join of all tables, potentially can report on any column.  No grouping.
    
SQL:
    The concord table is joined to the tweets table, and to the words table.  The join to 
    the words table gives us word count and word rank.
   
Select Criteria:
    date range   user input  whole bunch of different widgets, drop downs, and slider
    tweet_type   user input  dropdown
    word_type    user input  dropdown 
    word         user input  dropdown and text entry ( use % as wild card for multiple char )
    .... check and update         
    Min Rank: words.word_rank ) words.see drop down
    Max Count: (words.word_count) see drop down
   
Output Format:
    the usual    user input  drop down        
        
Sort Order:
    by number of occurrences of each word 
        
Note: 
    to better understand the select you may want to go to <Help> and
    read the section on the database.   

>-----------------------------------------------------------<                    
....
2020-05-24 08:26:23,729 - tweet - DEBUG - >>sql is:  SELECT DISTINCT tweets.tweet_datetime, concord.word, tweets.tweet, tweets.tweet_type, tweets.is_covid, words.word_rank, tweets.tweet_id, '*rc*', '*twr*' 
    FROM concord 
    JOIN tweets  ON concord.tweet_id = tweets.tweet_id  
    LEFT OUTER JOIN words  ON concord.word = words.word  
 WHERE 
    concord.word  LIKE     "joe" AND  
    tweets.tweet_datetime  >= ?  AND  
    tweets.tweet_datetime <= ?  AND  
    tweets.tweet_type = ?   
    ORDER BY tweets.tweet_datetime
....
2020-05-24 08:26:23,731 - tweet - DEBUG - >>sql_data is:  [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 08:26:23,731 - tweet - DEBUG - >>sql_data is:  [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 08:26:23,847 - tweet - DEBUG - select complete with footer info: Done: >
     total number of rows = 56
     select and file write took 0.11419272422790527 seconds
2020-05-24 08:26:23,855 - tweet - DEBUG - >>Select Done, rows selected: 56 time = 0.11419272422790527
....
2020-05-24 08:26:23,856 - tweet - DEBUG - Select Done, rows selected: 56 time = 0.11419272422790527
2020-05-24 08:26:49,322 - tweet - DEBUG - tweet_select_1 builder vars: builder vars ( self.x ):
     db_name:            
     select_name:        Basic Tweet Select
     output_format:      txt
     columns_out:        None
     a_word:             joe
     is_covid:           None
     default_order_by:   
     gui_order_by:       default
     begin_dt:           2019-10-10 00:00:00
     end_dt:             2020-11-20 00:00:00
     tweet_type:         tweet
     max_count:          None
     word_type:          None
     my_count:           None
     sql:                
     sql_where:          
     sql_having:         
     sql_data:           []



2020-05-24 08:26:49,323 - tweet - DEBUG - >>Basic Tweet Select > ( tweet_select_1.txt  )

General:        
    Find desired tweets
    Check tweet loading 
    Does not join to concord ( concordance ) or word tables, just tweets 
 
SQL:
    Straight select from tweets table only no corcordance or word info
 
Select Criteria: 
                 
    is Covid -   user input see dropdown.
    date range - user input whole bunch of different widgets, drop downs and slider
    ( other gui widgets ignored )
                   
Output Format:
    the usual - user input see dropdown

        
Sort:           
    user input see dropdown   !! not implementd 
                     
....
2020-05-24 08:26:49,324 - tweet - DEBUG - >>sql is:

 SELECT tweets.tweet_datetime, tweets.tweet_type, tweets.tweet, tweets.tweet_id  FROM tweets 
 WHERE 
    tweets.tweet_datetime  >= ?  AND  
    tweets.tweet_datetime <= ?  AND  
    tweets.tweet_type = ?   ORDER BY tweets.tweet_datetime 

....
2020-05-24 08:26:49,325 - tweet - DEBUG - >>sql_data is:
[datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 08:26:49,325 - tweet - DEBUG - >>Select Done, rows selected: 0 time = 0
....
2020-05-24 08:26:49,325 - tweet - DEBUG - Select Done, rows selected: 0 time = 0
2020-05-24 08:26:51,259 - tweet - DEBUG - tweet_select_1 builder vars: builder vars ( self.x ):
     db_name:            
     select_name:        Basic Tweet Select
     output_format:      txt
     columns_out:        None
     a_word:             joe
     is_covid:           None
     default_order_by:   
     gui_order_by:       default
     begin_dt:           2019-10-10 00:00:00
     end_dt:             2020-11-20 00:00:00
     tweet_type:         tweet
     max_count:          None
     word_type:          None
     my_count:           None
     sql:                
     sql_where:          
     sql_having:         
     sql_data:           []



2020-05-24 08:26:51,260 - tweet - DEBUG - >>Basic Tweet Select > ( tweet_select_1.txt  )

General:        
    Find desired tweets
    Check tweet loading 
    Does not join to concord ( concordance ) or word tables, just tweets 
 
SQL:
    Straight select from tweets table only no corcordance or word info
 
Select Criteria: 
                 
    is Covid -   user input see dropdown.
    date range - user input whole bunch of different widgets, drop downs and slider
    ( other gui widgets ignored )
                   
Output Format:
    the usual - user input see dropdown

        
Sort:           
    user input see dropdown   !! not implementd 
                     
....
2020-05-24 08:26:51,261 - tweet - DEBUG - >>sql is:

 SELECT tweets.tweet_datetime, tweets.tweet_type, tweets.tweet, tweets.tweet_id  FROM tweets 
 WHERE 
    tweets.tweet_datetime  >= ?  AND  
    tweets.tweet_datetime <= ?  AND  
    tweets.tweet_type = ?   ORDER BY tweets.tweet_datetime 

....
2020-05-24 08:26:51,262 - tweet - DEBUG - >>sql_data is:
[datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 08:31:04,285 - tweet - INFO - TweetApp: all done
2020-05-24 08:31:08,455 - tweet - INFO - Done config_logger
2020-05-24 08:31:08,455 - tweet - Notice - 


============================

Running TweetApp version = Ver: Alpha 11 - 2020 05 24.1 mode = add_2019

2020-05-24 08:31:08,456 - tweet - Notice - 


============================

Running TweetApp version = Ver: Alpha 11 - 2020 05 24.1 mode = add_2019

command line arg 0 =  D:\Russ\0000\python00\python3\_projects\twitter_analysis_db\sql_builder.py
current directory D:\Russ\0000\python00\python3\_projects\twitter_analysis_db
2020-05-24 08:31:08,456 - tweet - Notice - <parameters.Parameters object at 0x000001F5630F6788>
2020-05-24 08:31:08,456 - tweet - Notice - Time now: 2020-05-24 12:31:08
2020-05-24 08:31:08,566 - tweet.gui - INFO - in class gui_new GUI init
2020-05-24 08:31:08,824 - tweet - Notice - process memory =     572.83 mega bytes 
2020-05-24 08:31:11,877 - tweet - DEBUG - tweet_select_1 builder vars: builder vars ( self.x ):
     db_name:            
     select_name:        Basic Tweet Select
     output_format:      txt
     columns_out:        None
     a_word:             joe
     is_covid:           None
     default_order_by:   
     gui_order_by:       default
     begin_dt:           2019-10-10 00:00:00
     end_dt:             2020-11-20 00:00:00
     tweet_type:         tweet
     max_count:          None
     word_type:          None
     my_count:           None
     sql:                
     sql_where:          
     sql_having:         
     sql_data:           []



2020-05-24 08:31:11,878 - tweet - DEBUG - >>Basic Tweet Select > ( tweet_select_1.txt  )

General:        
    Find desired tweets
    Check tweet loading 
    Does not join to concord ( concordance ) or word tables, just tweets 
 
SQL:
    Straight select from tweets table only no corcordance or word info
 
Select Criteria: 
                 
    is Covid -   user input see dropdown.
    date range - user input whole bunch of different widgets, drop downs and slider
    ( other gui widgets ignored )
                   
Output Format:
    the usual - user input see dropdown

        
Sort:           
    user input see dropdown   !! not implementd 
                     
....
2020-05-24 08:31:11,879 - tweet - DEBUG - >>sql is:

 SELECT tweets.tweet_datetime, tweets.tweet_type, tweets.tweet, tweets.tweet_id  FROM tweets 
 WHERE 
    tweets.tweet_datetime  >= ?  AND  
    tweets.tweet_datetime <= ?  AND  
    tweets.tweet_type = ?   ORDER BY tweets.tweet_datetime 

....
2020-05-24 08:31:11,879 - tweet - DEBUG - >>sql_data is:
[datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 08:31:11,880 - tweet - DEBUG - >>Select Done, rows selected: 0 time = 0
....
2020-05-24 08:31:11,880 - tweet - DEBUG - Select Done, rows selected: 0 time = 0
2020-05-24 08:31:13,192 - tweet - DEBUG - tweet_select_1 builder vars: builder vars ( self.x ):
     db_name:            
     select_name:        Basic Tweet Select
     output_format:      txt
     columns_out:        None
     a_word:             joe
     is_covid:           None
     default_order_by:   
     gui_order_by:       default
     begin_dt:           2019-10-10 00:00:00
     end_dt:             2020-11-20 00:00:00
     tweet_type:         tweet
     max_count:          None
     word_type:          None
     my_count:           None
     sql:                
     sql_where:          
     sql_having:         
     sql_data:           []



2020-05-24 08:31:13,193 - tweet - DEBUG - >>Basic Tweet Select > ( tweet_select_1.txt  )

General:        
    Find desired tweets
    Check tweet loading 
    Does not join to concord ( concordance ) or word tables, just tweets 
 
SQL:
    Straight select from tweets table only no corcordance or word info
 
Select Criteria: 
                 
    is Covid -   user input see dropdown.
    date range - user input whole bunch of different widgets, drop downs and slider
    ( other gui widgets ignored )
                   
Output Format:
    the usual - user input see dropdown

        
Sort:           
    user input see dropdown   !! not implementd 
                     
....
2020-05-24 08:31:13,194 - tweet - DEBUG - >>sql is:

 SELECT tweets.tweet_datetime, tweets.tweet_type, tweets.tweet, tweets.tweet_id  FROM tweets 
 WHERE 
    tweets.tweet_datetime  >= ?  AND  
    tweets.tweet_datetime <= ?  AND  
    tweets.tweet_type = ?   ORDER BY tweets.tweet_datetime 

....
2020-05-24 08:31:13,195 - tweet - DEBUG - >>sql_data is:
[datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 08:31:13,198 - tweet - DEBUG - selet and output execute_args ('\n SELECT tweets.tweet_datetime, tweets.tweet_type, tweets.tweet, tweets.tweet_id  FROM tweets \n WHERE \n    tweets.tweet_datetime  >= ?  AND  \n    tweets.tweet_datetime <= ?  AND  \n    tweets.tweet_type = ?   ORDER BY tweets.tweet_datetime ', [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet'])
2020-05-24 08:33:05,647 - tweet - INFO - TweetApp: all done
2020-05-24 08:33:09,145 - tweet - INFO - Done config_logger
2020-05-24 08:33:09,145 - tweet - Notice - 


============================

Running TweetApp version = Ver: Alpha 11 - 2020 05 24.1 mode = add_2019

2020-05-24 08:33:09,146 - tweet - Notice - 


============================

Running TweetApp version = Ver: Alpha 11 - 2020 05 24.1 mode = add_2019

command line arg 0 =  D:\Russ\0000\python00\python3\_projects\twitter_analysis_db\tweet_app.py
current directory D:\Russ\0000\python00\python3\_projects\twitter_analysis_db
2020-05-24 08:33:09,146 - tweet - Notice - <parameters.Parameters object at 0x000001F56AB5DFC8>
2020-05-24 08:33:09,146 - tweet - Notice - Time now: 2020-05-24 12:33:09
2020-05-24 08:33:09,250 - tweet.gui - INFO - in class gui_new GUI init
2020-05-24 08:33:09,502 - tweet - Notice - process memory =     652.52 mega bytes 
2020-05-24 08:37:15,418 - tweet - INFO - TweetApp: all done
2020-05-24 08:38:29,501 - tweet - INFO - Done config_logger
2020-05-24 08:38:29,502 - tweet - Notice - 


============================

Running TweetApp version = Ver: Alpha 11 - 2020 05 24.1 mode = add_2019

2020-05-24 08:38:29,502 - tweet - Notice - 


============================

Running TweetApp version = Ver: Alpha 11 - 2020 05 24.1 mode = add_2019

command line arg 0 =  D:\Russ\0000\python00\python3\_projects\twitter_analysis_db\sql_builder.py
current directory D:\Russ\0000\python00\python3\_projects\twitter_analysis_db
2020-05-24 08:38:29,502 - tweet - Notice - <parameters.Parameters object at 0x000001F57711F888>
2020-05-24 08:38:29,502 - tweet - Notice - Time now: 2020-05-24 12:38:29
2020-05-24 08:38:29,634 - tweet.gui - INFO - in class gui_new GUI init
2020-05-24 08:38:29,903 - tweet - Notice - process memory =     701.64 mega bytes 
2020-05-24 08:38:32,280 - tweet - DEBUG - tweet_select_1 builder vars: builder vars ( self.x ):
     db_name:            R:/all_words_tweets_to_all2019.db
     select_name:        Basic Tweet Select
     output_format:      txt
     columns_out:        None
     a_word:             
     is_covid:           None
     default_order_by:   
     gui_order_by:       default
     begin_dt:           2019-10-10 00:00:00
     end_dt:             2020-11-20 00:00:00
     tweet_type:         tweet
     max_count:          None
     word_type:          get_error
     my_count:           None
     sql:                
     sql_where:          
     sql_having:         
     sql_data:           []



2020-05-24 08:38:32,281 - tweet - DEBUG - >>Basic Tweet Select > ( tweet_select_1.txt  )

General:        
    Find desired tweets
    Check tweet loading 
    Does not join to concord ( concordance ) or word tables, just tweets 
 
SQL:
    Straight select from tweets table only no corcordance or word info
 
Select Criteria: 
                 
    is Covid -   user input see dropdown.
    date range - user input whole bunch of different widgets, drop downs and slider
    ( other gui widgets ignored )
                   
Output Format:
    the usual - user input see dropdown

        
Sort:           
    user input see dropdown   !! not implementd 
                     
....
2020-05-24 08:38:32,282 - tweet - DEBUG - >>sql is:

 SELECT tweets.tweet_datetime, tweets.tweet_type, tweets.tweet, tweets.tweet_id  FROM tweets 
 WHERE 
    tweets.tweet_datetime  >= ?  AND  
    tweets.tweet_datetime <= ?  AND  
    tweets.tweet_type = ?   ORDER BY tweets.tweet_datetime 

....
2020-05-24 08:38:32,284 - tweet - DEBUG - >>sql_data is:
[datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 08:38:32,284 - tweet - DEBUG - >>Select Done, rows selected: 0 time = 0
....
2020-05-24 08:38:32,285 - tweet - DEBUG - Select Done, rows selected: 0 time = 0
2020-05-24 08:38:33,516 - tweet - DEBUG - tweet_select_1 builder vars: builder vars ( self.x ):
     db_name:            R:/all_words_tweets_to_all2019.db
     select_name:        Basic Tweet Select
     output_format:      txt
     columns_out:        None
     a_word:             
     is_covid:           None
     default_order_by:   
     gui_order_by:       default
     begin_dt:           2019-10-10 00:00:00
     end_dt:             2020-11-20 00:00:00
     tweet_type:         tweet
     max_count:          None
     word_type:          get_error
     my_count:           None
     sql:                
     sql_where:          
     sql_having:         
     sql_data:           []



2020-05-24 08:38:33,517 - tweet - DEBUG - >>Basic Tweet Select > ( tweet_select_1.txt  )

General:        
    Find desired tweets
    Check tweet loading 
    Does not join to concord ( concordance ) or word tables, just tweets 
 
SQL:
    Straight select from tweets table only no corcordance or word info
 
Select Criteria: 
                 
    is Covid -   user input see dropdown.
    date range - user input whole bunch of different widgets, drop downs and slider
    ( other gui widgets ignored )
                   
Output Format:
    the usual - user input see dropdown

        
Sort:           
    user input see dropdown   !! not implementd 
                     
....
2020-05-24 08:38:33,518 - tweet - DEBUG - >>sql is:

 SELECT tweets.tweet_datetime, tweets.tweet_type, tweets.tweet, tweets.tweet_id  FROM tweets 
 WHERE 
    tweets.tweet_datetime  >= ?  AND  
    tweets.tweet_datetime <= ?  AND  
    tweets.tweet_type = ?   ORDER BY tweets.tweet_datetime 

....
2020-05-24 08:38:33,519 - tweet - DEBUG - >>sql_data is:
[datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 08:38:33,521 - tweet - DEBUG - selet and output execute_args ('\n SELECT tweets.tweet_datetime, tweets.tweet_type, tweets.tweet, tweets.tweet_id  FROM tweets \n WHERE \n    tweets.tweet_datetime  >= ?  AND  \n    tweets.tweet_datetime <= ?  AND  \n    tweets.tweet_type = ?   ORDER BY tweets.tweet_datetime ', [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet'])
2020-05-24 08:38:33,608 - tweet - DEBUG - select complete with footer info: Done: >
     total number of rows = 3144
     select and file write took 0.08881664276123047 seconds
2020-05-24 08:38:33,616 - tweet - DEBUG - >>Select Done, rows selected: 3144 time = 0.08881664276123047
....
2020-05-24 08:38:33,616 - tweet - DEBUG - Select Done, rows selected: 3144 time = 0.08881664276123047
2020-05-24 08:38:45,762 - tweet - DEBUG - >>Information on: Basic Concordance Select -> ( concord_select_1.txt )

General:
    A concordance summary ( number of times a word is used ) is build for
    a specified time period ( can be "forever" )

SQL:
    The concord table is joined to the tweets table, and words are grouped and counted.

Select Criteria:
    date range   user input  whole bunch of different widgets, drop downs, and slider
    tweet_type   user input  dropdown
    word_type    user input  dropdown 

Output Format:
    the usual    user input  drop down        
        
Sort Order:
    by number of occurrences of each word 
        
Note: 
    to better understand the select you may want to go to <Help> and
    read the section on the database.        
                
>-----------------------------------------------------------<  
 
....
2020-05-24 08:38:45,763 - tweet - DEBUG - >>sql is:

 SELECT concord.word, concord.word_type, concord.is_ascii, '*rc*', COUNT( * ) as my_count FROM concord JOIN tweets  ON concord.tweet_id = tweets.tweet_id 
 WHERE 
    tweets.tweet_datetime  >= ?  AND  
    tweets.tweet_datetime <= ?  AND  
    tweets.tweet_type = ? GROUP BY concord.word 
    HAVING ( my_count > ? ) 
    ORDER BY my_count Desc, concord.word 

....
2020-05-24 08:38:45,764 - tweet - DEBUG - >>sql_data is:
[datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet', 3]
....
2020-05-24 08:38:45,764 - tweet - DEBUG - >>Select Done, rows selected: 0 time = 0
....
2020-05-24 08:38:45,764 - tweet - DEBUG - Select Done, rows selected: 0 time = 0
2020-05-24 08:38:52,706 - tweet - DEBUG - >>Information on: Basic Concordance Select -> ( concord_select_1.txt )

General:
    A concordance summary ( number of times a word is used ) is build for
    a specified time period ( can be "forever" )

SQL:
    The concord table is joined to the tweets table, and words are grouped and counted.

Select Criteria:
    date range   user input  whole bunch of different widgets, drop downs, and slider
    tweet_type   user input  dropdown
    word_type    user input  dropdown 

Output Format:
    the usual    user input  drop down        
        
Sort Order:
    by number of occurrences of each word 
        
Note: 
    to better understand the select you may want to go to <Help> and
    read the section on the database.        
                
>-----------------------------------------------------------<  
 
....
2020-05-24 08:38:52,707 - tweet - DEBUG - >>sql is:

 SELECT concord.word, concord.word_type, concord.is_ascii, '*rc*', COUNT( * ) as my_count FROM concord JOIN tweets  ON concord.tweet_id = tweets.tweet_id 
 WHERE 
    tweets.tweet_datetime  >= ?  AND  
    tweets.tweet_datetime <= ?  AND  
    tweets.tweet_type = ? GROUP BY concord.word 
    HAVING ( my_count > ? ) 
    ORDER BY my_count Desc, concord.word 

....
2020-05-24 08:38:52,708 - tweet - DEBUG - >>sql_data is:
[datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet', 3]
....
2020-05-24 08:38:52,711 - tweet - DEBUG - selet and output execute_args ("\n SELECT concord.word, concord.word_type, concord.is_ascii, '*rc*', COUNT( * ) as my_count FROM concord JOIN tweets  ON concord.tweet_id = tweets.tweet_id \n WHERE \n    tweets.tweet_datetime  >= ?  AND  \n    tweets.tweet_datetime <= ?  AND  \n    tweets.tweet_type = ? GROUP BY concord.word \n    HAVING ( my_count > ? ) \n    ORDER BY my_count Desc, concord.word ", [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet', 3])
2020-05-24 08:38:53,584 - tweet - DEBUG - select complete with footer info: Done: >
     total number of rows = 2137
     select and file write took 0.8744974136352539 seconds
2020-05-24 08:38:53,590 - tweet - DEBUG - >>Select Done, rows selected: 2137 time = 0.8744974136352539
....
2020-05-24 08:38:53,591 - tweet - DEBUG - Select Done, rows selected: 2137 time = 0.8744974136352539
2020-05-24 08:39:03,069 - tweet - DEBUG - >>Information on: select_03   Select Tweets Joined -> (select_03.txt)

General:
    A 3 way join of all tables, potentially can report on any column.  No grouping.
    
SQL:
    The concord table is joined to the tweets table, and to the words table.  The join to 
    the words table gives us word count and word rank.
   
Select Criteria:
    date range   user input  whole bunch of different widgets, drop downs, and slider
    tweet_type   user input  dropdown
    word_type    user input  dropdown 
    word         user input  dropdown and text entry ( use % as wild card for multiple char )
    .... check and update         
    Min Rank: words.word_rank ) words.see drop down
    Max Count: (words.word_count) see drop down
   
Output Format:
    the usual    user input  drop down        
        
Sort Order:
    by number of occurrences of each word 
        
Note: 
    to better understand the select you may want to go to <Help> and
    read the section on the database.   

>-----------------------------------------------------------<                    
....
2020-05-24 08:39:03,071 - tweet - DEBUG - >>sql is:  SELECT DISTINCT tweets.tweet_datetime, concord.word, tweets.tweet, tweets.tweet_type, tweets.is_covid, words.word_rank, tweets.tweet_id, '*rc*', '*twr*' 
    FROM concord 
    JOIN tweets  ON concord.tweet_id = tweets.tweet_id  
    LEFT OUTER JOIN words  ON concord.word = words.word  
 WHERE 
    concord.word  LIKE     "joe" AND  
    tweets.tweet_datetime  >= ?  AND  
    tweets.tweet_datetime <= ?  AND  
    tweets.tweet_type = ?   
    ORDER BY tweets.tweet_datetime
....
2020-05-24 08:39:03,072 - tweet - DEBUG - >>sql_data is:  [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 08:39:03,073 - tweet - DEBUG - >>sql_data is:  [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 08:39:03,073 - tweet - DEBUG - >>Select Done, rows selected: 0 time = 0
....
2020-05-24 08:39:03,074 - tweet - DEBUG - Select Done, rows selected: 0 time = 0
2020-05-24 08:39:05,331 - tweet - DEBUG - >>Information on: select_03   Select Tweets Joined -> (select_03.txt)

General:
    A 3 way join of all tables, potentially can report on any column.  No grouping.
    
SQL:
    The concord table is joined to the tweets table, and to the words table.  The join to 
    the words table gives us word count and word rank.
   
Select Criteria:
    date range   user input  whole bunch of different widgets, drop downs, and slider
    tweet_type   user input  dropdown
    word_type    user input  dropdown 
    word         user input  dropdown and text entry ( use % as wild card for multiple char )
    .... check and update         
    Min Rank: words.word_rank ) words.see drop down
    Max Count: (words.word_count) see drop down
   
Output Format:
    the usual    user input  drop down        
        
Sort Order:
    by number of occurrences of each word 
        
Note: 
    to better understand the select you may want to go to <Help> and
    read the section on the database.   

>-----------------------------------------------------------<                    
....
2020-05-24 08:39:05,333 - tweet - DEBUG - >>sql is:  SELECT DISTINCT tweets.tweet_datetime, concord.word, tweets.tweet, tweets.tweet_type, tweets.is_covid, words.word_rank, tweets.tweet_id, '*rc*', '*twr*' 
    FROM concord 
    JOIN tweets  ON concord.tweet_id = tweets.tweet_id  
    LEFT OUTER JOIN words  ON concord.word = words.word  
 WHERE 
    concord.word  LIKE     "joe" AND  
    tweets.tweet_datetime  >= ?  AND  
    tweets.tweet_datetime <= ?  AND  
    tweets.tweet_type = ?   
    ORDER BY tweets.tweet_datetime
....
2020-05-24 08:39:05,334 - tweet - DEBUG - >>sql_data is:  [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 08:39:05,335 - tweet - DEBUG - >>sql_data is:  [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 08:39:05,338 - tweet - DEBUG - selet and output execute_args ('SELECT DISTINCT tweets.tweet_datetime, concord.word, tweets.tweet, tweets.tweet_type, tweets.is_covid, words.word_rank, tweets.tweet_id, \'*rc*\', \'*twr*\' \n    FROM concord \n    JOIN tweets  ON concord.tweet_id = tweets.tweet_id  \n    LEFT OUTER JOIN words  ON concord.word = words.word  \n WHERE \n    concord.word  LIKE     "joe" AND  \n    tweets.tweet_datetime  >= ?  AND  \n    tweets.tweet_datetime <= ?  AND  \n    tweets.tweet_type = ?   \n    ORDER BY tweets.tweet_datetime', [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet'])
2020-05-24 08:39:05,452 - tweet - DEBUG - select complete with footer info: Done: >
     total number of rows = 56
     select and file write took 0.11614346504211426 seconds
2020-05-24 08:39:05,460 - tweet - DEBUG - >>Select Done, rows selected: 56 time = 0.11614346504211426
....
2020-05-24 08:39:05,461 - tweet - DEBUG - Select Done, rows selected: 56 time = 0.11614346504211426
2020-05-24 08:43:58,710 - tweet - INFO - TweetApp: all done
2020-05-24 08:53:08,555 - tweet - INFO - Done config_logger
2020-05-24 08:53:08,556 - tweet - Notice - 


============================

Running TweetApp version = Ver: Alpha 11 - 2020 05 24.1 mode = add_2019

2020-05-24 08:53:08,556 - tweet - Notice - 


============================

Running TweetApp version = Ver: Alpha 11 - 2020 05 24.1 mode = add_2019

command line arg 0 =  D:\Russ\0000\python00\python3\_projects\twitter_analysis_db\sql_builder.py
current directory D:\Russ\0000\python00\python3\_projects\twitter_analysis_db
2020-05-24 08:53:08,556 - tweet - Notice - <parameters.Parameters object at 0x000001F50379A348>
2020-05-24 08:53:08,556 - tweet - Notice - Time now: 2020-05-24 12:53:08
2020-05-24 08:53:08,661 - tweet.gui - INFO - in class gui_new GUI init
2020-05-24 08:53:08,903 - tweet - Notice - process memory =     538.40 mega bytes 
2020-05-24 08:53:57,370 - tweet - INFO - TweetApp: restart
2020-05-24 08:53:57,424 - tweet - INFO - Done config_logger
2020-05-24 08:53:57,424 - tweet - Notice - 
======
Restarting TweetApp version = Ver: Alpha 11 - 2020 05 24.1 mode = add_2019
======
command line arg 0 =  D:\Russ\0000\python00\python3\_projects\twitter_analysis_db\sql_builder.py
current directory D:\Russ\0000\python00\python3\_projects\twitter_analysis_db
2020-05-24 08:53:57,425 - tweet - Notice - <parameters.Parameters object at 0x000001F50FBD2E08>
2020-05-24 08:53:57,425 - tweet - Notice - Time now: 2020-05-24 12:53:57
2020-05-24 08:53:57,550 - tweet.gui - INFO - in class gui_new GUI init
2020-05-24 08:53:57,893 - tweet - Notice - process memory =     538.84 mega bytes 
2020-05-24 08:54:02,637 - tweet - DEBUG - tweet_select_1 builder vars: builder vars ( self.x ):
     db_name:            R:/all_words_tweets_to_all2019.db
     select_name:        Basic Tweet Select
     output_format:      txt
     columns_out:        None
     a_word:             
     is_covid:           None
     default_order_by:   
     gui_order_by:       default
     begin_dt:           2019-10-10 00:00:00
     end_dt:             2020-11-20 00:00:00
     tweet_type:         tweet
     max_count:          None
     word_type:          get_error
     my_count:           None
     sql:                
     sql_where:          
     sql_having:         
     sql_data:           []



2020-05-24 08:54:02,637 - tweet - DEBUG - >>Basic Tweet Select > ( tweet_select_1.txt  )

General:        
    Find desired tweets
    Check tweet loading 
    Does not join to concord ( concordance ) or word tables, just tweets 
 
SQL:
    Straight select from tweets table only no concord or word table info
 
Select Criteria:         
    is Covid   - user input   see dropdown.
    date range - user input   whole bunch of different widgets, dropdowns and slider
    ( other gui widgets ignored )
                   
Output Format:
    the usual - user input see dropdown

        
Sort:           
    user input see dropdown   !! not implementd 
                
>-----------------------------------------------------------<                       
....
2020-05-24 08:54:02,638 - tweet - DEBUG - >>sql is:

 SELECT tweets.tweet_datetime, tweets.tweet_type, tweets.tweet, tweets.tweet_id  FROM tweets 
 WHERE 
    tweets.tweet_datetime  >= ?  AND  
    tweets.tweet_datetime <= ?  AND  
    tweets.tweet_type = ?   ORDER BY tweets.tweet_datetime 

....
2020-05-24 08:54:02,639 - tweet - DEBUG - >>sql_data is:
[datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 08:54:02,639 - tweet - DEBUG - >>Select Done, rows selected: 0 time = 0
....
2020-05-24 08:54:02,640 - tweet - DEBUG - Select Done, rows selected: 0 time = 0
2020-05-24 09:57:36,988 - tweet - INFO - TweetApp: all done
2020-05-24 09:57:36,990 - tweet - INFO - TweetApp: all done
2020-05-24 10:14:11,764 - tweet - INFO - Done config_logger
2020-05-24 10:14:11,765 - tweet - Notice - 


============================

Running TweetApp version = Ver: Alpha 11 - 2020 05 24.1 mode = add_2019

2020-05-24 10:14:11,765 - tweet - Notice - 


============================

Running TweetApp version = Ver: Alpha 11 - 2020 05 24.1 mode = add_2019

command line arg 0 =  D:\Russ\0000\python00\python3\_projects\twitter_analysis_db\sql_builder.py
current directory D:\Russ\0000\python00\python3\_projects\twitter_analysis_db
2020-05-24 10:14:11,765 - tweet - Notice - <parameters.Parameters object at 0x000001F51E5C1588>
2020-05-24 10:14:11,765 - tweet - Notice - Time now: 2020-05-24 14:14:11
2020-05-24 10:14:11,814 - tweet.gui - INFO - in class gui_new GUI init
2020-05-24 10:14:11,934 - tweet - Notice - process memory =     276.94 mega bytes 
2020-05-24 10:14:14,086 - tweet - DEBUG - tweet_select_1 builder vars: builder vars ( self.x ):
     db_name:            R:/all_words_tweets_to_all2019.db
     select_name:        Basic Tweet Select
     output_format:      txt
     columns_out:        None
     a_word:             
     is_covid:           None
     default_order_by:   
     gui_order_by:       default
     begin_dt:           2019-10-10 00:00:00
     end_dt:             2020-11-20 00:00:00
     tweet_type:         tweet
     max_count:          None
     word_type:          get_error
     my_count:           None
     sql:                
     sql_where:          
     sql_having:         
     sql_data:           []



2020-05-24 10:14:14,087 - tweet - DEBUG - >>Basic Tweet Select > ( tweet_select_1.txt  )

General:        
    Find desired tweets
    Check tweet loading 
    Does not join to concord ( concordance ) or word tables, just tweets 
 
SQL:
    Straight select from tweets table only no concord or word table info
 
Select Criteria:         
    is Covid   - user input   see dropdown.
    date range - user input   whole bunch of different widgets, dropdowns and slider
    ( other gui widgets ignored )
                   
Output Format:
    the usual - user input see dropdown

        
Sort:           
    user input see dropdown   !! not implementd 
                
>-----------------------------------------------------------<                       
....
2020-05-24 10:14:14,087 - tweet - DEBUG - >>sql is:

 SELECT tweets.tweet_datetime, tweets.tweet_type, tweets.tweet, tweets.tweet_id  FROM tweets 
 WHERE 
    tweets.tweet_datetime  >= ?  AND  
    tweets.tweet_datetime <= ?  AND  
    tweets.tweet_type = ?   ORDER BY tweets.tweet_datetime 

....
2020-05-24 10:14:14,087 - tweet - DEBUG - >>sql_data is:
[datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 10:14:14,088 - tweet - DEBUG - selet and output execute_args ('\n SELECT tweets.tweet_datetime, tweets.tweet_type, tweets.tweet, tweets.tweet_id  FROM tweets \n WHERE \n    tweets.tweet_datetime  >= ?  AND  \n    tweets.tweet_datetime <= ?  AND  \n    tweets.tweet_type = ?   ORDER BY tweets.tweet_datetime ', [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet'])
2020-05-24 10:14:14,121 - tweet - DEBUG - select complete with footer info: Done: >
     total number of rows = 3144
     select and file write took 0.03322291374206543 seconds
2020-05-24 10:14:14,125 - tweet - DEBUG - >>Select Done, rows selected: 3144 time = 0.03322291374206543
....
2020-05-24 10:14:14,125 - tweet - DEBUG - Select Done, rows selected: 3144 time = 0.03322291374206543
2020-05-24 10:14:22,537 - tweet - DEBUG - >>Basic Concordance Select -> ( concord_select_1.txt )

General:
    A concordance summary ( number of times a word is used ) is build for
    a specified time period ( can be "forever" )

SQL:
    The concord table is joined to the tweets table, and words are grouped and counted.

Select Criteria:
    date range -  user input  whole bunch of different widgets, drop downs, and slider
    tweet_type - user input  dropdown
    word_type  -  user input  dropdown 

Output Format:
    the usual    user input  drop down        
        
Sort Order:
    by number of occurrences of each word 
        
Note: 
    to better understand the select you may want to go to <Help> and
    read the section on the database.        
                
>-----------------------------------------------------------<  
 
....
2020-05-24 10:14:22,538 - tweet - DEBUG - >>sql is:

 SELECT concord.word, concord.word_type, concord.is_ascii, '*rc*', COUNT( * ) as my_count FROM concord JOIN tweets  ON concord.tweet_id = tweets.tweet_id 
 WHERE 
    tweets.tweet_datetime  >= ?  AND  
    tweets.tweet_datetime <= ?  AND  
    tweets.tweet_type = ? GROUP BY concord.word 
    HAVING ( my_count > ? ) 
    ORDER BY my_count Desc, concord.word 

....
2020-05-24 10:14:22,538 - tweet - DEBUG - >>sql_data is:
[datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet', 3]
....
2020-05-24 10:14:22,540 - tweet - DEBUG - selet and output execute_args ("\n SELECT concord.word, concord.word_type, concord.is_ascii, '*rc*', COUNT( * ) as my_count FROM concord JOIN tweets  ON concord.tweet_id = tweets.tweet_id \n WHERE \n    tweets.tweet_datetime  >= ?  AND  \n    tweets.tweet_datetime <= ?  AND  \n    tweets.tweet_type = ? GROUP BY concord.word \n    HAVING ( my_count > ? ) \n    ORDER BY my_count Desc, concord.word ", [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet', 3])
2020-05-24 10:14:22,881 - tweet - DEBUG - select complete with footer info: Done: >
     total number of rows = 2137
     select and file write took 0.3406853675842285 seconds
2020-05-24 10:14:22,884 - tweet - DEBUG - >>Select Done, rows selected: 2137 time = 0.3406853675842285
....
2020-05-24 10:14:22,884 - tweet - DEBUG - Select Done, rows selected: 2137 time = 0.3406853675842285
2020-05-24 10:14:30,694 - tweet - DEBUG - >>select_03   Select Tweets Joined -> (select_03.txt)

General:
    A 3 way join of all tables, potentially can report on any column.  No grouping.
    
SQL:
    The concord table is joined to the tweets table, and to the words table.  The join to 
    the words table gives us word count and word rank.
   
Select Criteria:
    date range   user input  whole bunch of different widgets, drop downs, and slider
    tweet_type   user input  dropdown
    word_type    user input  dropdown 
    word         user input  dropdown and text entry ( use % as wild card for multiple char )
    .... check and update         
    Min Rank: words.word_rank ) words.see drop down
    Max Count: (words.word_count) see drop down
   
Output Format:
    the usual    user input  drop down        
        
Sort Order:
    by number of occurrences of each word 
        
Note: 
    to better understand the select you may want to go to <Help> and
    read the section on the database.   

>-----------------------------------------------------------<                    
....
2020-05-24 10:14:30,695 - tweet - DEBUG - >>sql is:  SELECT DISTINCT tweets.tweet_datetime, concord.word, tweets.tweet, tweets.tweet_type, tweets.is_covid, words.word_rank, tweets.tweet_id, '*rc*', '*twr*' 
    FROM concord 
    JOIN tweets  ON concord.tweet_id = tweets.tweet_id  
    LEFT OUTER JOIN words  ON concord.word = words.word  
 WHERE 
    concord.word  LIKE     "joe" AND  
    tweets.tweet_datetime  >= ?  AND  
    tweets.tweet_datetime <= ?  AND  
    tweets.tweet_type = ?   
    ORDER BY tweets.tweet_datetime
....
2020-05-24 10:14:30,695 - tweet - DEBUG - >>sql_data is:  [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 10:14:30,695 - tweet - DEBUG - >>sql_data is:  [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 10:14:30,697 - tweet - DEBUG - selet and output execute_args ('SELECT DISTINCT tweets.tweet_datetime, concord.word, tweets.tweet, tweets.tweet_type, tweets.is_covid, words.word_rank, tweets.tweet_id, \'*rc*\', \'*twr*\' \n    FROM concord \n    JOIN tweets  ON concord.tweet_id = tweets.tweet_id  \n    LEFT OUTER JOIN words  ON concord.word = words.word  \n WHERE \n    concord.word  LIKE     "joe" AND  \n    tweets.tweet_datetime  >= ?  AND  \n    tweets.tweet_datetime <= ?  AND  \n    tweets.tweet_type = ?   \n    ORDER BY tweets.tweet_datetime', [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet'])
2020-05-24 10:14:30,742 - tweet - DEBUG - select complete with footer info: Done: >
     total number of rows = 56
     select and file write took 0.04684782028198242 seconds
2020-05-24 10:14:30,745 - tweet - DEBUG - >>Select Done, rows selected: 56 time = 0.04684782028198242
....
2020-05-24 10:14:30,746 - tweet - DEBUG - Select Done, rows selected: 56 time = 0.04684782028198242
2020-05-24 10:14:47,177 - tweet - DEBUG - >>select_03   Select Tweets Joined -> (select_03.txt)

General:
    A 3 way join of all tables, potentially can report on any column.  No grouping.
    
SQL:
    The concord table is joined to the tweets table, and to the words table.  The join to 
    the words table gives us word count and word rank.
   
Select Criteria:
    date range   user input  whole bunch of different widgets, drop downs, and slider
    tweet_type   user input  dropdown
    word_type    user input  dropdown 
    word         user input  dropdown and text entry ( use % as wild card for multiple char )
    .... check and update         
    Min Rank: words.word_rank ) words.see drop down
    Max Count: (words.word_count) see drop down
   
Output Format:
    the usual    user input  drop down        
        
Sort Order:
    by number of occurrences of each word 
        
Note: 
    to better understand the select you may want to go to <Help> and
    read the section on the database.   

>-----------------------------------------------------------<                    
....
2020-05-24 10:14:47,178 - tweet - DEBUG - >>sql is:  SELECT DISTINCT tweets.tweet_datetime, concord.word, tweets.tweet, tweets.tweet_type, tweets.is_covid, words.word_rank, tweets.tweet_id, '*rc*', '*twr*' 
    FROM concord 
    JOIN tweets  ON concord.tweet_id = tweets.tweet_id  
    LEFT OUTER JOIN words  ON concord.word = words.word  
 WHERE 
    concord.word  LIKE     "joe" AND  
    tweets.tweet_datetime  >= ?  AND  
    tweets.tweet_datetime <= ?  AND  
    tweets.tweet_type = ?   
    ORDER BY tweets.tweet_datetime
....
2020-05-24 10:14:47,178 - tweet - DEBUG - >>sql_data is:  [datetime.datetime(2020, 1, 19, 0, 0), datetime.datetime(2020, 1, 28, 0, 0), 'tweet']
....
2020-05-24 10:14:47,179 - tweet - DEBUG - >>sql_data is:  [datetime.datetime(2020, 1, 19, 0, 0), datetime.datetime(2020, 1, 28, 0, 0), 'tweet']
....
2020-05-24 10:14:47,180 - tweet - DEBUG - selet and output execute_args ('SELECT DISTINCT tweets.tweet_datetime, concord.word, tweets.tweet, tweets.tweet_type, tweets.is_covid, words.word_rank, tweets.tweet_id, \'*rc*\', \'*twr*\' \n    FROM concord \n    JOIN tweets  ON concord.tweet_id = tweets.tweet_id  \n    LEFT OUTER JOIN words  ON concord.word = words.word  \n WHERE \n    concord.word  LIKE     "joe" AND  \n    tweets.tweet_datetime  >= ?  AND  \n    tweets.tweet_datetime <= ?  AND  \n    tweets.tweet_type = ?   \n    ORDER BY tweets.tweet_datetime', [datetime.datetime(2020, 1, 19, 0, 0), datetime.datetime(2020, 1, 28, 0, 0), 'tweet'])
2020-05-24 10:14:47,225 - tweet - DEBUG - select complete with footer info: Done: >
     total number of rows = 2
     select and file write took 0.045909881591796875 seconds
2020-05-24 10:14:47,229 - tweet - DEBUG - >>Select Done, rows selected: 2 time = 0.045909881591796875
....
2020-05-24 10:14:47,230 - tweet - DEBUG - Select Done, rows selected: 2 time = 0.045909881591796875
2020-05-24 10:15:26,877 - tweet - INFO - TweetApp: all done
2020-05-24 11:14:39,263 - tweet - INFO - Done config_logger
2020-05-24 11:14:39,263 - tweet - Notice - 


============================

Running TweetApp version = Ver: Alpha 11 - 2020 05 24.1 mode = add_2019

2020-05-24 11:14:39,263 - tweet - Notice - 


============================

Running TweetApp version = Ver: Alpha 11 - 2020 05 24.1 mode = add_2019

command line arg 0 =  D:\Russ\0000\python00\python3\_projects\twitter_analysis_db\sql_builder.py
current directory D:\Russ\0000\python00\python3\_projects\twitter_analysis_db
2020-05-24 11:14:39,263 - tweet - Notice - <parameters.Parameters object at 0x000001F50FA43EC8>
2020-05-24 11:14:39,263 - tweet - Notice - Time now: 2020-05-24 15:14:39
2020-05-24 11:14:39,315 - tweet.gui - INFO - in class gui_new GUI init
2020-05-24 11:14:39,448 - tweet - Notice - process memory =     304.69 mega bytes 
2020-05-24 11:14:41,548 - tweet - DEBUG - tweet_select_1 builder vars: builder vars ( self.x ):
     db_name:            R:/all_words_tweets_to_all2019.db
     select_name:        Basic Tweet Select
     output_format:      txt
     columns_out:        None
     a_word:             
     is_covid:           None
     default_order_by:   
     gui_order_by:       default
     begin_dt:           2019-10-10 00:00:00
     end_dt:             2020-11-20 00:00:00
     tweet_type:         tweet
     max_count:          None
     word_type:          get_error
     my_count:           None
     sql:                
     sql_where:          
     sql_having:         
     sql_data:           []



2020-05-24 11:14:41,549 - tweet - DEBUG - >>Basic Tweet Select > ( tweet_select_1.txt  )

General:        
    Find desired tweets
    Check tweet loading 
    Does not join to concord ( concordance ) or word tables, just tweets 
 
SQL:
    Straight select from tweets table only no concord or word table info
 
Select Criteria:         
    is Covid   - user input   see dropdown.
    date range - user input   whole bunch of different widgets, dropdowns and slider
    ( other gui widgets ignored )
                   
Output Format:
    the usual - user input see dropdown

        
Sort:           
    user input see dropdown   !! not implementd 
                
>-----------------------------------------------------------<                       
....
2020-05-24 11:14:41,550 - tweet - DEBUG - >>sql is:

 SELECT tweets.tweet_datetime, tweets.tweet_type, tweets.tweet, tweets.tweet_id  FROM tweets 
 WHERE 
    tweets.tweet_datetime  >= ?  AND  
    tweets.tweet_datetime <= ?  AND  
    tweets.tweet_type = ?   ORDER BY tweets.tweet_datetime 

....
2020-05-24 11:14:41,551 - tweet - DEBUG - >>sql_data is:
[datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 11:14:41,552 - tweet - DEBUG - selet and output execute_args ('\n SELECT tweets.tweet_datetime, tweets.tweet_type, tweets.tweet, tweets.tweet_id  FROM tweets \n WHERE \n    tweets.tweet_datetime  >= ?  AND  \n    tweets.tweet_datetime <= ?  AND  \n    tweets.tweet_type = ?   ORDER BY tweets.tweet_datetime ', [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet'])
2020-05-24 11:14:41,584 - tweet - DEBUG - select complete with footer info: Done: >
     total number of rows = 3144
     select and file write took 0.033225297927856445 seconds
2020-05-24 11:14:41,588 - tweet - DEBUG - >>Select Done, rows selected: 3144 time = 0.033225297927856445
....
2020-05-24 11:14:41,588 - tweet - DEBUG - Select Done, rows selected: 3144 time = 0.033225297927856445
2020-05-24 11:14:47,685 - tweet - DEBUG - >>Basic Concordance Select -> ( concord_select_1.txt )

General:
    A concordance summary ( number of times a word is used ) is build for
    a specified time period ( can be "forever" )

SQL:
    The concord table is joined to the tweets table, and words are grouped and counted.

Select Criteria:
    date range -  user input  whole bunch of different widgets, drop downs, and slider
    tweet_type - user input  dropdown
    word_type  -  user input  dropdown 

Output Format:
    the usual    user input  drop down        
        
Sort Order:
    by number of occurrences of each word 
        
Note: 
    to better understand the select you may want to go to <Help> and
    read the section on the database.        
                
>-----------------------------------------------------------<  
 
....
2020-05-24 11:14:47,686 - tweet - DEBUG - >>sql is:

 SELECT concord.word, concord.word_type, concord.is_ascii, '*rc*', COUNT( * ) as my_count FROM concord JOIN tweets  ON concord.tweet_id = tweets.tweet_id 
 WHERE 
    tweets.tweet_datetime  >= ?  AND  
    tweets.tweet_datetime <= ?  AND  
    tweets.tweet_type = ? GROUP BY concord.word 
    HAVING ( my_count > ? ) 
    ORDER BY my_count Desc, concord.word 

....
2020-05-24 11:14:47,686 - tweet - DEBUG - >>sql_data is:
[datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet', 3]
....
2020-05-24 11:14:47,687 - tweet - DEBUG - selet and output execute_args ("\n SELECT concord.word, concord.word_type, concord.is_ascii, '*rc*', COUNT( * ) as my_count FROM concord JOIN tweets  ON concord.tweet_id = tweets.tweet_id \n WHERE \n    tweets.tweet_datetime  >= ?  AND  \n    tweets.tweet_datetime <= ?  AND  \n    tweets.tweet_type = ? GROUP BY concord.word \n    HAVING ( my_count > ? ) \n    ORDER BY my_count Desc, concord.word ", [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet', 3])
2020-05-24 11:14:48,029 - tweet - DEBUG - select complete with footer info: Done: >
     total number of rows = 2137
     select and file write took 0.3416719436645508 seconds
2020-05-24 11:14:48,032 - tweet - DEBUG - >>Select Done, rows selected: 2137 time = 0.3416719436645508
....
2020-05-24 11:14:48,032 - tweet - DEBUG - Select Done, rows selected: 2137 time = 0.3416719436645508
2020-05-24 11:14:56,459 - tweet - DEBUG - >>select_03   Select Tweets Joined -> (select_03.txt)

General:
    A 3 way join of all tables, potentially can report on any column.  No grouping.
    
SQL:
    The concord table is joined to the tweets table, and to the words table.  The join to 
    the words table gives us word count and word rank.
   
Select Criteria:
    date range   user input  whole bunch of different widgets, drop downs, and slider
    tweet_type   user input  dropdown
    word_type    user input  dropdown 
    word         user input  dropdown and text entry ( use % as wild card for multiple char )
    .... check and update         
    Min Rank: words.word_rank ) words.see drop down
    Max Count: (words.word_count) see drop down
   
Output Format:
    the usual    user input  drop down        
        
Sort Order:
    by number of occurrences of each word 
        
Note: 
    to better understand the select you may want to go to <Help> and
    read the section on the database.   

>-----------------------------------------------------------<                    
....
2020-05-24 11:14:56,460 - tweet - DEBUG - >>sql is:  SELECT DISTINCT tweets.tweet_datetime, concord.word, tweets.tweet, tweets.tweet_type, tweets.is_covid, words.word_rank, tweets.tweet_id, '*rc*', '*twr*' 
    FROM concord 
    JOIN tweets  ON concord.tweet_id = tweets.tweet_id  
    LEFT OUTER JOIN words  ON concord.word = words.word  
 WHERE 
    concord.word  LIKE     "joe" AND  
    tweets.tweet_datetime  >= ?  AND  
    tweets.tweet_datetime <= ?  AND  
    tweets.tweet_type = ?   
    ORDER BY tweets.tweet_datetime
....
2020-05-24 11:14:56,461 - tweet - DEBUG - >>sql_data is:  [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 11:14:56,461 - tweet - DEBUG - >>sql_data is:  [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 11:14:56,462 - tweet - DEBUG - selet and output execute_args ('SELECT DISTINCT tweets.tweet_datetime, concord.word, tweets.tweet, tweets.tweet_type, tweets.is_covid, words.word_rank, tweets.tweet_id, \'*rc*\', \'*twr*\' \n    FROM concord \n    JOIN tweets  ON concord.tweet_id = tweets.tweet_id  \n    LEFT OUTER JOIN words  ON concord.word = words.word  \n WHERE \n    concord.word  LIKE     "joe" AND  \n    tweets.tweet_datetime  >= ?  AND  \n    tweets.tweet_datetime <= ?  AND  \n    tweets.tweet_type = ?   \n    ORDER BY tweets.tweet_datetime', [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet'])
2020-05-24 11:14:56,508 - tweet - DEBUG - select complete with footer info: Done: >
     total number of rows = 56
     select and file write took 0.046889543533325195 seconds
2020-05-24 11:14:56,512 - tweet - DEBUG - >>Select Done, rows selected: 56 time = 0.046889543533325195
....
2020-05-24 11:14:56,512 - tweet - DEBUG - Select Done, rows selected: 56 time = 0.046889543533325195
2020-05-24 11:59:43,942 - tweet - INFO - TweetApp: all done
2020-05-24 12:08:31,960 - tweet - INFO - Done config_logger
2020-05-24 12:08:31,960 - tweet - Notice - 


============================

Running TweetApp version = Ver: Alpha 11 - 2020 05 24.1 mode = db_in_code_dir

2020-05-24 12:08:31,960 - tweet - Notice - 


============================

Running TweetApp version = Ver: Alpha 11 - 2020 05 24.1 mode = db_in_code_dir

command line arg 0 =  D:\Russ\0000\python00\python3\_projects\twitter_analysis_db\parameters.py
current directory D:\Russ\0000\python00\python3\_projects\twitter_analysis_db
2020-05-24 12:08:31,961 - tweet - Notice - <parameters.Parameters object at 0x000001F559874848>
2020-05-24 12:08:31,961 - tweet - Notice - Time now: 2020-05-24 16:08:31
2020-05-24 12:08:32,015 - tweet.gui - INFO - in class gui_new GUI init
2020-05-24 12:08:32,159 - tweet - Notice - process memory =     284.89 mega bytes 
2020-05-24 12:08:39,217 - tweet - DEBUG - tweet_select_1 builder vars: builder vars ( self.x ):
     db_name:            ./all_words_tweets_to_all2019.db
     select_name:        Basic Tweet Select
     output_format:      txt
     columns_out:        None
     a_word:             
     is_covid:           None
     default_order_by:   
     gui_order_by:       default
     begin_dt:           2019-10-10 00:00:00
     end_dt:             2020-11-20 00:00:00
     tweet_type:         tweet
     max_count:          None
     word_type:          get_error
     my_count:           None
     sql:                
     sql_where:          
     sql_having:         
     sql_data:           []



2020-05-24 12:08:39,218 - tweet - DEBUG - >>Basic Tweet Select > ( tweet_select_1.txt  )

General:        
    Find desired tweets
    Check tweet loading 
    Does not join to concord ( concordance ) or word tables, just tweets 
 
SQL:
    Straight select from tweets table only no concord or word table info
 
Select Criteria:         
    is Covid   - user input   see dropdown.
    date range - user input   whole bunch of different widgets, dropdowns and slider
    ( other gui widgets ignored )
                   
Output Format:
    the usual - user input see dropdown

        
Sort:           
    user input see dropdown   !! not implementd 
                
>-----------------------------------------------------------<                       
....
2020-05-24 12:08:39,218 - tweet - DEBUG - >>sql is:

 SELECT tweets.tweet_datetime, tweets.tweet_type, tweets.tweet, tweets.tweet_id  FROM tweets 
 WHERE 
    tweets.tweet_datetime  >= ?  AND  
    tweets.tweet_datetime <= ?  AND  
    tweets.tweet_type = ?   ORDER BY tweets.tweet_datetime 

....
2020-05-24 12:08:39,219 - tweet - DEBUG - >>sql_data is:
[datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 12:08:39,223 - tweet - DEBUG - selet and output execute_args ('\n SELECT tweets.tweet_datetime, tweets.tweet_type, tweets.tweet, tweets.tweet_id  FROM tweets \n WHERE \n    tweets.tweet_datetime  >= ?  AND  \n    tweets.tweet_datetime <= ?  AND  \n    tweets.tweet_type = ?   ORDER BY tweets.tweet_datetime ', [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet'])
2020-05-24 12:08:39,255 - tweet - DEBUG - select complete with footer info: Done: >
     total number of rows = 3144
     select and file write took 0.03611254692077637 seconds
2020-05-24 12:08:39,259 - tweet - DEBUG - >>Select Done, rows selected: 3144 time = 0.03611254692077637
....
2020-05-24 12:08:39,260 - tweet - DEBUG - Select Done, rows selected: 3144 time = 0.03611254692077637
2020-05-24 12:10:02,711 - tweet - DEBUG - tweet_select_1 builder vars: builder vars ( self.x ):
     db_name:            ./all_words_tweets_to_all2019.db
     select_name:        Basic Tweet Select
     output_format:      txt
     columns_out:        None
     a_word:             
     is_covid:           None
     default_order_by:   
     gui_order_by:       default
     begin_dt:           2019-10-10 00:00:00
     end_dt:             2020-11-20 00:00:00
     tweet_type:         tweet
     max_count:          None
     word_type:          get_error
     my_count:           None
     sql:                
     sql_where:          
     sql_having:         
     sql_data:           []



2020-05-24 12:10:02,712 - tweet - DEBUG - >>Basic Tweet Select > ( tweet_select_1.txt  )

General:        
    Find desired tweets
    Check tweet loading 
    Does not join to concord ( concordance ) or word tables, just tweets 
 
SQL:
    Straight select from tweets table only no concord or word table info
 
Select Criteria:         
    is Covid   - user input   see dropdown.
    date range - user input   whole bunch of different widgets, dropdowns and slider
    ( other gui widgets ignored )
                   
Output Format:
    the usual - user input see dropdown

        
Sort:           
    user input see dropdown   !! not implementd 
                
>-----------------------------------------------------------<                       
....
2020-05-24 12:10:02,713 - tweet - DEBUG - >>sql is:

 SELECT tweets.tweet_datetime, tweets.tweet_type, tweets.tweet, tweets.tweet_id  FROM tweets 
 WHERE 
    tweets.tweet_datetime  >= ?  AND  
    tweets.tweet_datetime <= ?  AND  
    tweets.tweet_type = ?   ORDER BY tweets.tweet_datetime 

....
2020-05-24 12:10:02,713 - tweet - DEBUG - >>sql_data is:
[datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 12:10:02,714 - tweet - DEBUG - selet and output execute_args ('\n SELECT tweets.tweet_datetime, tweets.tweet_type, tweets.tweet, tweets.tweet_id  FROM tweets \n WHERE \n    tweets.tweet_datetime  >= ?  AND  \n    tweets.tweet_datetime <= ?  AND  \n    tweets.tweet_type = ?   ORDER BY tweets.tweet_datetime ', [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet'])
2020-05-24 12:10:02,746 - tweet - DEBUG - select complete with footer info: Done: >
     total number of rows = 3144
     select and file write took 0.03318381309509277 seconds
2020-05-24 12:10:02,750 - tweet - DEBUG - >>Select Done, rows selected: 3144 time = 0.03318381309509277
....
2020-05-24 12:10:02,750 - tweet - DEBUG - Select Done, rows selected: 3144 time = 0.03318381309509277
2020-05-24 12:10:31,620 - tweet - DEBUG - >>select_03   Select Tweets Joined -> (select_03.txt)

General:
    A 3 way join of all tables, potentially can report on any column.  No grouping.
    
SQL:
    The concord table is joined to the tweets table, and to the words table.  The join to 
    the words table gives us word count and word rank.
   
Select Criteria:
    date range   user input  whole bunch of different widgets, drop downs, and slider
    tweet_type   user input  dropdown
    word_type    user input  dropdown 
    word         user input  dropdown and text entry ( use % as wild card for multiple char )
    .... check and update         
    Min Rank: words.word_rank ) words.see drop down
    Max Count: (words.word_count) see drop down
   
Output Format:
    the usual    user input  drop down        
        
Sort Order:
    by number of occurrences of each word 
        
Note: 
    to better understand the select you may want to go to <Help> and
    read the section on the database.   

>-----------------------------------------------------------<                    
....
2020-05-24 12:10:31,620 - tweet - DEBUG - >>sql is:  SELECT DISTINCT tweets.tweet_datetime, concord.word, tweets.tweet, tweets.tweet_type, tweets.is_covid, words.word_rank, tweets.tweet_id, '*rc*', '*twr*' 
    FROM concord 
    JOIN tweets  ON concord.tweet_id = tweets.tweet_id  
    LEFT OUTER JOIN words  ON concord.word = words.word  
 WHERE 
    concord.word  LIKE     "joe" AND  
    tweets.tweet_datetime  >= ?  AND  
    tweets.tweet_datetime <= ?  AND  
    tweets.tweet_type = ?   
    ORDER BY tweets.tweet_datetime
....
2020-05-24 12:10:31,621 - tweet - DEBUG - >>sql_data is:  [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 12:10:31,621 - tweet - DEBUG - >>sql_data is:  [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 12:10:31,623 - tweet - DEBUG - selet and output execute_args ('SELECT DISTINCT tweets.tweet_datetime, concord.word, tweets.tweet, tweets.tweet_type, tweets.is_covid, words.word_rank, tweets.tweet_id, \'*rc*\', \'*twr*\' \n    FROM concord \n    JOIN tweets  ON concord.tweet_id = tweets.tweet_id  \n    LEFT OUTER JOIN words  ON concord.word = words.word  \n WHERE \n    concord.word  LIKE     "joe" AND  \n    tweets.tweet_datetime  >= ?  AND  \n    tweets.tweet_datetime <= ?  AND  \n    tweets.tweet_type = ?   \n    ORDER BY tweets.tweet_datetime', [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet'])
2020-05-24 12:10:31,669 - tweet - DEBUG - select complete with footer info: Done: >
     total number of rows = 56
     select and file write took 0.04782557487487793 seconds
2020-05-24 12:10:31,673 - tweet - DEBUG - >>Select Done, rows selected: 56 time = 0.04782557487487793
....
2020-05-24 12:10:31,673 - tweet - DEBUG - Select Done, rows selected: 56 time = 0.04782557487487793
2020-05-24 12:10:52,444 - tweet - DEBUG - >>select_03   Select Tweets Joined -> (select_03.txt)

General:
    A 3 way join of all tables, potentially can report on any column.  No grouping.
    
SQL:
    The concord table is joined to the tweets table, and to the words table.  The join to 
    the words table gives us word count and word rank.
   
Select Criteria:
    date range   user input  whole bunch of different widgets, drop downs, and slider
    tweet_type   user input  dropdown
    word_type    user input  dropdown 
    word         user input  dropdown and text entry ( use % as wild card for multiple char )
    .... check and update         
    Min Rank: words.word_rank ) words.see drop down
    Max Count: (words.word_count) see drop down
   
Output Format:
    the usual    user input  drop down        
        
Sort Order:
    by number of occurrences of each word 
        
Note: 
    to better understand the select you may want to go to <Help> and
    read the section on the database.   

>-----------------------------------------------------------<                    
....
2020-05-24 12:10:52,444 - tweet - DEBUG - >>sql is:  SELECT DISTINCT tweets.tweet_datetime, concord.word, tweets.tweet, tweets.tweet_type, tweets.is_covid, words.word_rank, tweets.tweet_id, '*rc*', '*twr*' 
    FROM concord 
    JOIN tweets  ON concord.tweet_id = tweets.tweet_id  
    LEFT OUTER JOIN words  ON concord.word = words.word  
 WHERE 
    concord.word  LIKE     "joe" AND  
    tweets.tweet_datetime  >= ?  AND  
    tweets.tweet_datetime <= ?  AND  
    tweets.tweet_type = ?   
    ORDER BY tweets.tweet_datetime
....
2020-05-24 12:10:52,445 - tweet - DEBUG - >>sql_data is:  [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 12:10:52,445 - tweet - DEBUG - >>sql_data is:  [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 12:10:52,447 - tweet - DEBUG - selet and output execute_args ('SELECT DISTINCT tweets.tweet_datetime, concord.word, tweets.tweet, tweets.tweet_type, tweets.is_covid, words.word_rank, tweets.tweet_id, \'*rc*\', \'*twr*\' \n    FROM concord \n    JOIN tweets  ON concord.tweet_id = tweets.tweet_id  \n    LEFT OUTER JOIN words  ON concord.word = words.word  \n WHERE \n    concord.word  LIKE     "joe" AND  \n    tweets.tweet_datetime  >= ?  AND  \n    tweets.tweet_datetime <= ?  AND  \n    tweets.tweet_type = ?   \n    ORDER BY tweets.tweet_datetime', [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet'])
2020-05-24 12:10:52,494 - tweet - DEBUG - select complete with footer info: Done: >
     total number of rows = 56
     select and file write took 0.04785656929016113 seconds
2020-05-24 12:10:52,497 - tweet - DEBUG - >>Select Done, rows selected: 56 time = 0.04785656929016113
....
2020-05-24 12:10:52,498 - tweet - DEBUG - Select Done, rows selected: 56 time = 0.04785656929016113
2020-05-24 12:11:08,998 - tweet - DEBUG - >>select_03   Select Tweets Joined -> (select_03.txt)

General:
    A 3 way join of all tables, potentially can report on any column.  No grouping.
    
SQL:
    The concord table is joined to the tweets table, and to the words table.  The join to 
    the words table gives us word count and word rank.
   
Select Criteria:
    date range   user input  whole bunch of different widgets, drop downs, and slider
    tweet_type   user input  dropdown
    word_type    user input  dropdown 
    word         user input  dropdown and text entry ( use % as wild card for multiple char )
    .... check and update         
    Min Rank: words.word_rank ) words.see drop down
    Max Count: (words.word_count) see drop down
   
Output Format:
    the usual    user input  drop down        
        
Sort Order:
    by number of occurrences of each word 
        
Note: 
    to better understand the select you may want to go to <Help> and
    read the section on the database.   

>-----------------------------------------------------------<                    
....
2020-05-24 12:11:08,999 - tweet - DEBUG - >>sql is:  SELECT DISTINCT tweets.tweet_datetime, concord.word, tweets.tweet, tweets.tweet_type, tweets.is_covid, words.word_rank, tweets.tweet_id, '*rc*', '*twr*' 
    FROM concord 
    JOIN tweets  ON concord.tweet_id = tweets.tweet_id  
    LEFT OUTER JOIN words  ON concord.word = words.word  
 WHERE 
    concord.word  LIKE     "republican" AND  
    tweets.tweet_datetime  >= ?  AND  
    tweets.tweet_datetime <= ?  AND  
    tweets.tweet_type = ?   
    ORDER BY tweets.tweet_datetime
....
2020-05-24 12:11:09,000 - tweet - DEBUG - >>sql_data is:  [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 12:11:09,000 - tweet - DEBUG - >>sql_data is:  [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 12:11:09,001 - tweet - DEBUG - selet and output execute_args ('SELECT DISTINCT tweets.tweet_datetime, concord.word, tweets.tweet, tweets.tweet_type, tweets.is_covid, words.word_rank, tweets.tweet_id, \'*rc*\', \'*twr*\' \n    FROM concord \n    JOIN tweets  ON concord.tweet_id = tweets.tweet_id  \n    LEFT OUTER JOIN words  ON concord.word = words.word  \n WHERE \n    concord.word  LIKE     "republican" AND  \n    tweets.tweet_datetime  >= ?  AND  \n    tweets.tweet_datetime <= ?  AND  \n    tweets.tweet_type = ?   \n    ORDER BY tweets.tweet_datetime', [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet'])
2020-05-24 12:11:09,054 - tweet - DEBUG - select complete with footer info: Done: >
     total number of rows = 138
     select and file write took 0.050753116607666016 seconds
2020-05-24 12:11:09,058 - tweet - DEBUG - >>Select Done, rows selected: 138 time = 0.050753116607666016
....
2020-05-24 12:11:09,058 - tweet - DEBUG - Select Done, rows selected: 138 time = 0.050753116607666016
2020-05-24 12:11:32,747 - tweet - DEBUG - >>select_03   Select Tweets Joined -> (select_03.txt)

General:
    A 3 way join of all tables, potentially can report on any column.  No grouping.
    
SQL:
    The concord table is joined to the tweets table, and to the words table.  The join to 
    the words table gives us word count and word rank.
   
Select Criteria:
    date range   user input  whole bunch of different widgets, drop downs, and slider
    tweet_type   user input  dropdown
    word_type    user input  dropdown 
    word         user input  dropdown and text entry ( use % as wild card for multiple char )
    .... check and update         
    Min Rank: words.word_rank ) words.see drop down
    Max Count: (words.word_count) see drop down
   
Output Format:
    the usual    user input  drop down        
        
Sort Order:
    by number of occurrences of each word 
        
Note: 
    to better understand the select you may want to go to <Help> and
    read the section on the database.   

>-----------------------------------------------------------<                    
....
2020-05-24 12:11:32,748 - tweet - DEBUG - >>sql is:  SELECT DISTINCT tweets.tweet_datetime, concord.word, tweets.tweet, tweets.tweet_type, tweets.is_covid, words.word_rank, tweets.tweet_id, '*rc*', '*twr*' 
    FROM concord 
    JOIN tweets  ON concord.tweet_id = tweets.tweet_id  
    LEFT OUTER JOIN words  ON concord.word = words.word  
 WHERE 
    concord.word  LIKE     "republican" AND  
    tweets.tweet_datetime  >= ?  AND  
    tweets.tweet_datetime <= ?  AND  
    tweets.tweet_type = ?   
    ORDER BY tweets.tweet_datetime
....
2020-05-24 12:11:32,748 - tweet - DEBUG - >>sql_data is:  [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 12:11:32,749 - tweet - DEBUG - >>sql_data is:  [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 12:11:32,750 - tweet - DEBUG - selet and output execute_args ('SELECT DISTINCT tweets.tweet_datetime, concord.word, tweets.tweet, tweets.tweet_type, tweets.is_covid, words.word_rank, tweets.tweet_id, \'*rc*\', \'*twr*\' \n    FROM concord \n    JOIN tweets  ON concord.tweet_id = tweets.tweet_id  \n    LEFT OUTER JOIN words  ON concord.word = words.word  \n WHERE \n    concord.word  LIKE     "republican" AND  \n    tweets.tweet_datetime  >= ?  AND  \n    tweets.tweet_datetime <= ?  AND  \n    tweets.tweet_type = ?   \n    ORDER BY tweets.tweet_datetime', [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet'])
2020-05-24 12:11:32,799 - tweet - DEBUG - select complete with footer info: Done: >
     total number of rows = 138
     select and file write took 0.04980969429016113 seconds
2020-05-24 12:11:32,803 - tweet - DEBUG - >>Select Done, rows selected: 138 time = 0.04980969429016113
....
2020-05-24 12:11:32,803 - tweet - DEBUG - Select Done, rows selected: 138 time = 0.04980969429016113
2020-05-24 12:11:45,008 - tweet - DEBUG - >>select_03   Select Tweets Joined -> (select_03.txt)

General:
    A 3 way join of all tables, potentially can report on any column.  No grouping.
    
SQL:
    The concord table is joined to the tweets table, and to the words table.  The join to 
    the words table gives us word count and word rank.
   
Select Criteria:
    date range   user input  whole bunch of different widgets, drop downs, and slider
    tweet_type   user input  dropdown
    word_type    user input  dropdown 
    word         user input  dropdown and text entry ( use % as wild card for multiple char )
    .... check and update         
    Min Rank: words.word_rank ) words.see drop down
    Max Count: (words.word_count) see drop down
   
Output Format:
    the usual    user input  drop down        
        
Sort Order:
    by number of occurrences of each word 
        
Note: 
    to better understand the select you may want to go to <Help> and
    read the section on the database.   

>-----------------------------------------------------------<                    
....
2020-05-24 12:11:45,008 - tweet - DEBUG - >>sql is:  SELECT DISTINCT tweets.tweet_datetime, concord.word, tweets.tweet, tweets.tweet_type, tweets.is_covid, words.word_rank, tweets.tweet_id, '*rc*', '*twr*' 
    FROM concord 
    JOIN tweets  ON concord.tweet_id = tweets.tweet_id  
    LEFT OUTER JOIN words  ON concord.word = words.word  
 WHERE 
    concord.word  LIKE     "republican" AND  
    tweets.tweet_datetime  >= ?  AND  
    tweets.tweet_datetime <= ?  AND  
    tweets.tweet_type = ?   
    ORDER BY tweets.tweet_datetime
....
2020-05-24 12:11:45,009 - tweet - DEBUG - >>sql_data is:  [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 12:11:45,009 - tweet - DEBUG - >>sql_data is:  [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet']
....
2020-05-24 12:11:45,010 - tweet - DEBUG - selet and output execute_args ('SELECT DISTINCT tweets.tweet_datetime, concord.word, tweets.tweet, tweets.tweet_type, tweets.is_covid, words.word_rank, tweets.tweet_id, \'*rc*\', \'*twr*\' \n    FROM concord \n    JOIN tweets  ON concord.tweet_id = tweets.tweet_id  \n    LEFT OUTER JOIN words  ON concord.word = words.word  \n WHERE \n    concord.word  LIKE     "republican" AND  \n    tweets.tweet_datetime  >= ?  AND  \n    tweets.tweet_datetime <= ?  AND  \n    tweets.tweet_type = ?   \n    ORDER BY tweets.tweet_datetime', [datetime.datetime(2019, 10, 10, 0, 0), datetime.datetime(2020, 11, 20, 0, 0), 'tweet'])
2020-05-24 12:11:45,061 - tweet - DEBUG - select complete with footer info: Done: >
     total number of rows = 138
     select and file write took 0.051743268966674805 seconds
2020-05-24 12:11:45,063 - tweet - DEBUG - >>Select Done, rows selected: 138 time = 0.051743268966674805
....
2020-05-24 12:11:45,064 - tweet - DEBUG - Select Done, rows selected: 138 time = 0.051743268966674805
2020-05-24 12:12:10,034 - tweet - DEBUG - >>Basic Concordance Select -> ( concord_select_1.txt )

General:
    A concordance summary ( number of times a word is used ) is build for
    a specified time period ( can be "forever" )

SQL:
    The concord table is joined to the tweets table, and words are grouped and counted.

Select Criteria:
    date range -  user input  whole bunch of different widgets, drop downs, and slider
    tweet_type - user input  dropdown
    word_type  -  user input  dropdown 

Output Format:
    the usual    user input  drop down        
        
Sort Order:
    by number of occurrences of each word 
        
Note: 
    to better understand the select you may want to go to <Help> and
    read the section on the database.        
                
>-----------------------------------------------------------<  
 
....
2020-05-24 12:12:10,035 - tweet - DEBUG - >>sql is:

 SELECT concord.word, concord.word_type, concord.is_ascii, '*rc*', COUNT( * ) as my_count FROM concord JOIN tweets  ON concord.tweet_id = tweets.tweet_id 
 WHERE 
    tweets.tweet_datetime  >= ?  AND  
    tweets.tweet_datetime <= ?  AND  
    tweets.tweet_type = ? GROUP BY concord.word 
    HAVING ( my_count > ? ) 
    ORDER BY my_count Desc, concord.word 

....
2020-05-24 12:12:10,035 - tweet - DEBUG - >>sql_data is:
[datetime.datetime(2006, 3, 1, 0, 0), datetime.datetime(2020, 5, 25, 0, 0), 'tweet', 3]
....
2020-05-24 12:12:10,037 - tweet - DEBUG - selet and output execute_args ("\n SELECT concord.word, concord.word_type, concord.is_ascii, '*rc*', COUNT( * ) as my_count FROM concord JOIN tweets  ON concord.tweet_id = tweets.tweet_id \n WHERE \n    tweets.tweet_datetime  >= ?  AND  \n    tweets.tweet_datetime <= ?  AND  \n    tweets.tweet_type = ? GROUP BY concord.word \n    HAVING ( my_count > ? ) \n    ORDER BY my_count Desc, concord.word ", [datetime.datetime(2006, 3, 1, 0, 0), datetime.datetime(2020, 5, 25, 0, 0), 'tweet', 3])
2020-05-24 12:12:10,497 - tweet - DEBUG - select complete with footer info: Done: >
     total number of rows = 3715
     select and file write took 0.46161675453186035 seconds
2020-05-24 12:12:10,500 - tweet - DEBUG - >>Select Done, rows selected: 3715 time = 0.46161675453186035
....
2020-05-24 12:12:10,500 - tweet - DEBUG - Select Done, rows selected: 3715 time = 0.46161675453186035
